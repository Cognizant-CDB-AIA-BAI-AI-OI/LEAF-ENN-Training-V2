
class DomainConfig():
    """
    Interface whose domain-specific implementations reflect a domain's
    chance to tell the system about different aspects of data-driven
    configuration.

    A 'DomainConfig' instance describes the data that's required
    for training and evaluation, including where it is, and how to load it
    and use it.

    Also, a chance is afforded by this class to translate some domain-specific
    parameters into parameters that the service-side Builder would need to know.

    Each instance is intended to be stateless, and thus no constructor
    is necessary.
    """


    def build_config(self, dict_reference, verbose=False):
        """
        Called by the Session Server to build up the domain-specific
        configuration.  This method ends up calling other abstract
        methods such as generate_default_info_dict() and
        generate_filename_dict() to return the completed dictionary.

        :param dict_reference: A reference to a dictionary to use as a basis.
                This can either be a filename reference or a dictionary itself.
        :param verbose: Controls how chatty the process is. Default False.
        :return: a config dictionary with any missing defaults filled in.
        """
        raise NotImplementedError


    def generate_default_info_dict(self, extra_config):
        """
        Generates the default values for the domain-specific configuration
        dictionary.

        :param extra_config: A first stab at a domin-specific configuration
            dictionary, as read-in by build_config().  This will include all
            domain-specific configuration read in, including potentially
            misspelled keys (this class doesn't know what is valid yet at this
            point). This allows for the defaults generated by the method to
            depend on other values, if that is necessary.

        :return: A dictionary of *default* domain-specific configuration, whose
            values will be mixed with what was read in from the config files
            inside the build_config() method.

            Dictionary structure can be whatever you like, because it is only
            domain evaluation code that will be reading this data. Nested
            structures, lists and primitives are OK, however any scalar
            leaf-node data must be simple primitives (like strings, floats,
            ints, booleans) that are easily JSON-able. Specifically: code
            objects are not allowed, as this information goes over the wire
            to the workers.

            By default, this generic implementation returns an empty dictionary
            with no defaults, as we dont'know anything about the domain-
            specifics at this level.
        """
        raise NotImplementedError


    def generate_filename_dict(self, domain_specific_dict):
        """
        :param domain_specific_dict: The assembled domain-specific configuration
            dictionary, with defaults and read-in values already mixed together.

        :return: A dictionary of domain-specific file configuration information,
            where keys are logical references to data files and values are
            data files whose contents need to make it over to each worker.

            By default, this generic implementation returns an empty dictionary
            with no defaults, as we dont'know anything about the domain-
            specifics at this level.
        """
        raise NotImplementedError


    def generate_builder_config_add_ons(self, domain_config):
        """
        :param domain_config: Domain-specific configuration dictionary.
        :return: a dictionary that will be used to update() the builder
                config dictionary sent to the service
        """
        raise NotImplementedError


    def get_default_evaluation_common_config(self):
        """
        Prepares a default dictionary for evaluation configuration
        that is used by the common evaluation code on the worker
        (i.e. what is in framework.client_script.client.py)
        """
        raise NotImplementedError

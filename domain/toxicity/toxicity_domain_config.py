
from framework.domain.network_domain_config import NetworkDomainConfig


class ToxicityDomainConfig(NetworkDomainConfig):
    """
    Implementation of the DomainConfig class for the toxicity domain, the
    domain's chance to tell the system about different aspects of data-driven
    configuration.

    A 'DomainConfig' instance for ENN describes the data that's required
    for training and evaluation, including where it is, and how to load it
    and use it.

    Also, a chance is afforded by this class to translate some domain-specific
    parameters into parameters that the service-side NetworkBuilder would
    need to know.

    Each instance is intended to be stateless, and thus no constructor
    is necessary.

    """

    def generate_default_info_dict(self, extra_config):
        """
        Generates the default values for the domain-specific configuration
        dictionary.

        :param extra_config: A first stab at a domin-specific configuration
            dictionary, as read-in by build_config().  This will include all
            domain-specific configuration read in, including potentially
            misspelled keys (this class doesn't know what is valid yet at this
            point). This allows for the defaults generated by the method to
            depend on other values, if that is necessary.

        :return: A dictionary of *default* domain-specific configuration, whose
            values will be mixed with what was read in from the config files
            inside the build_config() method.

            Dictionary structure can be whatever you like, because it is only
            domain evaluation code that will be reading this data. Nested
            structures, lists and primitives are OK, however any scalar
            leaf-node data must be simple primitives (like strings, floats,
            ints, booleans) that are easily JSON-able. Specifically: code
            objects are not allowed, as this information goes over the wire
            to the workers.
        """

        default_info = {
            # Set vocab size to what was used to create tokens pickle data file.
            "vocab_size": 10000,

            # Input sentence length to model.
            "max_sentence_length": 100,

            # Pre-trained embeddings to use if any.
            "pretrained_embeddings": None,

            # Whether to evolve which embeddings to use.
            "evolve_embeddings": False,

            # Whether any pre-trained embeddings should be further trained.
            "embeddings_trainable": False,

            # Whether embeddings should be concatenated with auxiliary
            # raw embeddings.
            "concat_embeddings": False,

            # Name of final decoder to include if any.
            "decoder": None,

            # Percentage of input words to dropout for training.
            "input_dropout": 0.,

            # Standard deviation of Gaussian noise layer applied to embedding.
            "input_noise": 0.,

            # Fitness metric to use for evolution.
            "fitness_metric": "accuracy",

            # Treat toxicity prediction as a single-task multi-class
            # classification problem.
            "num_tasks": 1,
            "loss_function": 'categorical_crossentropy',

            # Whether to enable secondary objective, aka number of parameters
            "enable_alt_obj": False,

            # Option to a fixed model json in the evaluator.
            "model_json": None,

            # Parameters for using the evolved learning rate (lr)
            "lr_scale": 1.0,
            "lr_floor": 0.0,
            "lr_decay": 10,
            "lr_decay_amount": 0.1
        }

        return default_info


    def generate_filename_dict(self, domain_specific_dict):
        """
        Generates filenames of required data files, these names are used to
        determine s3 address for download as well as local basedir and
        enn_cache file paths.  They are also the names of the folders inside
        the any archive (tar.gz) files

        :param domain_specific_dict: The assembled domain-specific configuration
            dictionary, with defaults and read-in values already mixed together.

        :return: A dictionary of domain-specific file configuration information,
            where keys are logical references to data files and values are
            data files whose contents need to make it over to each worker.
        """

        info = domain_specific_dict
        vocab_size = info['vocab_size']

        # Add training data files.
        filename_dict = {
            'labels': "toxicity_labels.pkl",
            'tokens': "toxicity_tokens_{}_words.pkl".format(vocab_size)
        }

        # Add files containing pretrained embedding matrices.
        if info['evolve_embeddings']:
            available_embeddings = ['fasttext', 'glove']
            for embeddings in available_embeddings:
                filename_dict[embeddings] = "{}_matrix_{}.pkl".format(
                        embeddings, vocab_size)
        elif info['pretrained_embeddings'] is not None:
            embeddings = info['pretrained_embeddings']
            filename_dict[embeddings] = "{}_matrix_{}.pkl".format(
                    embeddings, vocab_size)

        return filename_dict


    def determine_num_tasks(self, domain_specific_dict):
        """
        Called by the SessionServer.

        :param domain_specific_dict: The assembled domain-specific configuration
            dictionary, with defaults and read-in values already mixed together.
        :return: An integer representing the number of tasks for the network.
            By default a value of "None" is returned, indicating that the
            value is indicated in the network builder configuration
            directly, or is determined by that config's defaults.

        This method translates some domain-specific configuration information
        into generalized specifications for the inputs and outputs of the
        network.  The information created here gets sent to the service
        to be digested by the network constructor.

        While it is conceivable that what gets specified here could be done
        statically in the builder config file, that, however, can be a bit
        cumbersome, and the programmatic interpretation of a few domain config
        parameters tends to have fewer errors.
        """
        num_tasks = 1
        return num_tasks


    def determine_input_shapes(self, domain_specific_dict):
        """
        Called by the SessionServer.

        :param domain_specific_dict: The assembled domain-specific configuration
            dictionary, with defaults and read-in values already mixed together.
        :return: A list representing the input shape specifications.
            By default a value of "None" is returned, indicating that the
            value is indicated in the network builder configuration
            directly, or is determined by that config's defaults.

        The input and/or output shapes specification can each take one of
        a few forms:

                1.  A single list that describes a single shape
                    for a single terminal to be used for all tasks.
                    Like this:  [ 128, 128, 1 ]

                2.  A list of lists that describes a different shape
                    for each single-terminal task. Length of the outer
                    list must equal 'num_tasks' in the config for this
                    to be valid. Like this for num_tasks = 3:
                        [ [ 56, 56, 1 ], [ 23, 23, 1 ], [ 4096, 1 ] ]

                    Note that semantically, this *could* describe a
                    common multi-terminal spec for each task when all
                    tasks terminals are the same. Unfortunately this
                    case is indistinguishable from the case described
                    above and any multi-terminal task must use a fully-
                    specified list described in method (3) below,
                    repeats or no.

                3.  A list of lists of lists that describes a different
                    shape for each terminal of a multi-terminal task.
                    Length of the outer list must equal 'num_tasks' in
                    the config for this to be valid.

                    The outer-most list has one entry per task.
                    The middle-most list has one entry per task-terminal,
                    even if any given task only has a single terminal.
                    The inner-most list has one entry per shape dimension
                    for the task-terminal.

                    Like this:  (1st task - 1 terminal,
                                 2nd task - 2 terminals,
                                 3rd task - 3 terminals)
                        [   [ [ 4096, 1 ] ],
                            [ [ 56, 56, 1 ], [ 23, 23, 1 ] ],
                            [ [ 256, 256, 1 ], [ 56, 56, 1 ], [ 18, 1 ] ]
                        ]

        This method translates some domain-specific configuration information
        into generalized specifications for the inputs and outputs of the
        network.  The information created here gets sent to the service
        to be digested by the network constructor.

        While it is conceivable that what gets specified here could be done
        statically in the builder config file, that, however, can be a bit
        cumbersome, and the programmatic interpretation of a few domain config
        parameters tends to have fewer errors.
        """

        # Use Form (1) above for the input shape specification.
        # However many tasks we have, they all have the same number of input
        # terminals (one) and each terminal has the same shape.

        # Here, we put None in the filter dimension, so that the service can
        # deduce the correct shape based on the evolved number of filters.
        input_shapes = (domain_specific_dict['max_sentence_length'], None)
        return input_shapes


    def determine_output_shapes(self, domain_specific_dict):
        """
        Called by the SessionServer.

        :param domain_specific_dict: The assembled domain-specific configuration
            dictionary, with defaults and read-in values already mixed together.
        :return: A list representing the output shape specifications.
            By default a value of "None" is returned, indicating that the
            value is indicated in the network builder configuration
            directly, or is determined by that config's defaults.

        The input and/or output shapes specification can each take one of
        a few forms:

                1.  A single list that describes a single shape
                    for a single terminal to be used for all tasks.
                    Like this:  [ 128, 128, 1 ]

                2.  A list of lists that describes a different shape
                    for each single-terminal task. Length of the outer
                    list must equal 'num_tasks' in the config for this
                    to be valid. Like this for num_tasks = 3:
                        [ [ 56, 56, 1 ], [ 23, 23, 1 ], [ 4096, 1 ] ]

                    Note that semantically, this *could* describe a
                    common multi-terminal spec for each task when all
                    tasks terminals are the same. Unfortunately this
                    case is indistinguishable from the case described
                    above and any multi-terminal task must use a fully-
                    specified list described in method (3) below,
                    repeats or no.

                3.  A list of lists of lists that describes a different
                    shape for each terminal of a multi-terminal task.
                    Length of the outer list must equal 'num_tasks' in
                    the config for this to be valid.

                    The outer-most list has one entry per task.
                    The middle-most list has one entry per task-terminal,
                    even if any given task only has a single terminal.
                    The inner-most list has one entry per shape dimension
                    for the task-terminal.

                    Like this:  (1st task - 1 terminal,
                                 2nd task - 2 terminals,
                                 3rd task - 3 terminals)
                        [   [ [ 4096, 1 ] ],
                            [ [ 56, 56, 1 ], [ 23, 23, 1 ] ],
                            [ [ 256, 256, 1 ], [ 56, 56, 1 ], [ 18, 1 ] ]
                        ]

        This method translates some domain-specific configuration information
        into generalized specifications for the inputs and outputs of the
        network.  The information created here gets sent to the service
        to be digested by the network constructor.

        While it is conceivable that what gets specified here could be done
        statically in the builder config file, that, however, can be a bit
        cumbersome, and the programmatic interpretation of a few domain config
        parameters tends to have fewer errors.
        """
        # Use Form (1) for output shape specification as well.
        # Two classes: toxic or non-toxic.
        output_shapes = [2]
        return output_shapes
